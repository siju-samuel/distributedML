# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from protos import paxos_pb2 as protos_dot_paxos__pb2


class PaxosNodeStub(object):
  """Paxos requires a total of (2f+1) nodes to tolerate f faulty nodes and arrive at consensus.
  A quorum (majority) of acceptances are needed for the node to be designated as leader.

  Paxos service that runs on each participating node.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.prepare = channel.unary_unary(
        '/distributedML.PaxosNode/prepare',
        request_serializer=protos_dot_paxos__pb2.proposal.SerializeToString,
        response_deserializer=protos_dot_paxos__pb2.ack.FromString,
        )
    self.accept = channel.unary_unary(
        '/distributedML.PaxosNode/accept',
        request_serializer=protos_dot_paxos__pb2.request_acceptance.SerializeToString,
        response_deserializer=protos_dot_paxos__pb2.acceptance.FromString,
        )
    self.accepted = channel.unary_unary(
        '/distributedML.PaxosNode/accepted',
        request_serializer=protos_dot_paxos__pb2.consensus.SerializeToString,
        response_deserializer=protos_dot_paxos__pb2.blank.FromString,
        )
    self.ping = channel.unary_unary(
        '/distributedML.PaxosNode/ping',
        request_serializer=protos_dot_paxos__pb2.blank.SerializeToString,
        response_deserializer=protos_dot_paxos__pb2.blank.FromString,
        )


class PaxosNodeServicer(object):
  """Paxos requires a total of (2f+1) nodes to tolerate f faulty nodes and arrive at consensus.
  A quorum (majority) of acceptances are needed for the node to be designated as leader.

  Paxos service that runs on each participating node.
  """

  def prepare(self, request, context):
    """This node sends a proposal to every other node participating in the consensus
    and receives acknowledgments marking their acceptance or rejection.
    The value (IP address) of the acknowledment with the highest seq_no is chosen.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def accept(self, request, context):
    """Requests acceptance from other nodes that the chosen value (IP) should be the leader.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def accepted(self, request, context):
    """If majority have accepted then other nodes are notified that consensus has been achieved about a leader.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ping(self, request, context):
    """Health check on participating nodes while running Paxos.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PaxosNodeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'prepare': grpc.unary_unary_rpc_method_handler(
          servicer.prepare,
          request_deserializer=protos_dot_paxos__pb2.proposal.FromString,
          response_serializer=protos_dot_paxos__pb2.ack.SerializeToString,
      ),
      'accept': grpc.unary_unary_rpc_method_handler(
          servicer.accept,
          request_deserializer=protos_dot_paxos__pb2.request_acceptance.FromString,
          response_serializer=protos_dot_paxos__pb2.acceptance.SerializeToString,
      ),
      'accepted': grpc.unary_unary_rpc_method_handler(
          servicer.accepted,
          request_deserializer=protos_dot_paxos__pb2.consensus.FromString,
          response_serializer=protos_dot_paxos__pb2.blank.SerializeToString,
      ),
      'ping': grpc.unary_unary_rpc_method_handler(
          servicer.ping,
          request_deserializer=protos_dot_paxos__pb2.blank.FromString,
          response_serializer=protos_dot_paxos__pb2.blank.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'distributedML.PaxosNode', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
